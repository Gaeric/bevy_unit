#+title: Units
#+startup: content
#+author: Gaeric
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/static/css/worg.css" rel="stylesheet" type="text/css">
#+OPTIONS: ^:{}
* Units
** modular character
   这个示例展示了如何将多个使用相同骨骼或基于同一套骨骼拆分出的各个子模块拼接到一起，并播放完整动画的功能。

   其技术原理为：获取完整的人物骨架，将各个子骨架按名称重新将从属关系绑定至完整骨架上。
*** DONE animations
    可以获取到正常的AnimationClip，但是不知道应该如何正常在拼接好的人物上播放动画，有待后续继续深入了解。

    在discord上求助后，我发现存在原始代码可能存在的两个问题：

    1. clip需要进行处理，生成AnimationGraph并插入到该实体中
    2. 可能需要使用transitions来播放动画

    经过上面两个小点的调整之后，我成功播放了动画，以下是动画播放部分的代码
    #+begin_src rust-ts
      pub fn run_animations(
          mut commands: Commands,
          mut animation_players_query: Query<&mut AnimationPlayer>,
          scene_and_animation_player_link_query: Query<
              (&SceneName, &AnimationEntityLink),
              Added<AnimationEntityLink>,
              >,
          animations: Res<Animations>,
          scene_entities_by_name: Res<SceneEntitiesByName>,
          mut graphs: ResMut<Assets<AnimationGraph>>,
      ) {
          let main_skeleton_scene_entity = scene_entities_by_name
              .0
              .get("modular_character/main_skeleton.glb")
              .expect("the scene to be registered");

          let (_, animation_player_entity_link) = scene_and_animation_player_link_query
              .get(*main_skeleton_scene_entity)
              .expect("the scene to exist");

          let mut animation_player = animation_players_query
              .get_mut(animation_player_entity_link.0)
              .expect("to have an animation player on the main skelection");

          let animation_clip = animations
              .0
              .get("Sword_Slash")
              .expect("to have sword_slash")
              .clone_weak();

          let (graph, animation_index) = AnimationGraph::from_clip(animation_clip);

          let graph_handle = graphs.add(graph);

          let mut transitions = AnimationTransitions::new();

          transitions
              .play(&mut animation_player, animation_index, Duration::ZERO)
              .repeat();

          commands
              .entity(animation_player_entity_link.0)
              .insert(graph_handle)
              .insert(transitions);
      }
    #+end_src
*** reference
    @see 
    https://github.com/SnowdenWintermute/bevy-modular-characters-proof-of-concept
** fps ui
   一个提示帧数的UI库

   https://github.com/IyesGames/iyes_perf_ui
** bevy_shine
   学习如何在最新的bevy库上，使用路径追踪技术构建全局光照

   详细信息记录于bevy_shine crate中
** render_graph
   在bevy 0.12中验证确认，Camera指定的render_graph后，渲染流程仅遵循指定的render_graph运行

   #+begin_src rust-ts
     commands.spawn(Camera3dBundle {
         camera_render_graph: CameraRenderGraph::new(my_plugin::graph::NAME),
         transform: Transform::from_xyz(-2.0, 2.5, 5.0).looking_at(Vec3::ZERO, Vec3::Y),
         ..Default::default()
     });
   #+end_src

   如上所示，如果指定了Camera3dBundle的render_graph为my_plugin中的render_graph，则渲染过程完全按照render graph中的节点顺序进行。
** viewtarget
   在bevy 0.12版本中，UpscalingNode节点能正常向窗口输出最终图像

   需要使用ViewTarget结构的out_texture做为RenderPassColorAttachment的view输出
** hikari
   在实现shine demo的过程中，我发现我缺少如何将mesh和material与demo相结合的方法，这个方法ray tracing demo不会给出答案，需要对render系统进行分析。

   为了减少分析过程产生的冗余，本节将摘录我移到至0.11版本的hikari的全部代码，解释每个片段的含义和实现，以帮助我掌握构建附带mesh和material的ray tracing的方法。
*** mesh_instance
    #+begin_src rust-ts
      #+end_src
      #+begin_src rust-ts
    #+end_src
**** mod
     #+begin_src rust-ts
       pub struct MeshMaterialPlugin;
       impl Plugin for MeshMaterialPlugin {
           fn build(&self, app: &mut App) {
               app.add_plugins((
                   MeshPlugin,
                   MaterialPlugin,
                   InstancePlugin,
                   GenericMaterialPlugin::default(),
                   GenericInstancePlugin::default(),
               ));

               if let Ok(render_app) = app.get_sub_app_mut(RenderApp) {
                   render_app.add_systems(
                       Render,
                       (
                           prepare_texture_bind_group_layout
                               .in_set(RenderSet::Prepare)
                               .after(MeshMaterialSystems::PrepareAssets),
                           queue_mesh_material_bind_group.in_set(RenderSet::Queue),
                       ),
                   );
               }
           }

           fn finish(&self, app: &mut App) {
               app.sub_app_mut(RenderApp)
                   .init_resource::<MeshMaterialBindGroupLayout>();
           }
       }
     #+end_src
     mod中的MeshMaterialPlugin是整个mesh_instance的集合Plugin，所有mesh和material操作应当是由这个plugin完成。

     从效果上看，它除了初始化了另外几个plugin，还做了prepare_texture_bind_group_layout和queue_mesh_material_bind_group，并对MeshMaterialBindGroupLayout这个资源进行了初始化。

     #+begin_src rust-ts
       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuVertex {
           pub position: Vec3,
           pub normal: Vec3,
           pub uv: Vec2,
       }

       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuPrimitive {
           /// Global positions of vertices.
           pub vertices: [Vec3; 3],
           /// Indices of vertices in the vertex buffer (offset not applied).
           pub indices: [u32; 3],
           /// Index of the node in the node buffer (offset not applied).
           node_index: u32,
       }
     #+end_src
     直观理解的话，GpuVertex是存储的某一个点上的信息，包括顶点位置，法线方向和对应的uv坐标。而GpuPrimitive存储了图元信息，这个图元一定是一个三角形，初步分析可以确认vertices是三个顶点，那么indices应该是这三个顶点的顺序，至于node_index目前暂不清楚存储什么信息。

     #+begin_src rust-ts
       impl Bounded for GpuPrimitive {
           fn aabb(&self) -> AABB {
               AABB::empty()
                   .grow(&self.vertices[0].to_array().into())
                   .grow(&self.vertices[1].to_array().into())
                   .grow(&self.vertices[2].to_array().into())
           }
       }

       impl BHShape for GpuPrimitive {
           fn set_bh_node_index(&mut self, index: usize) {
               self.node_index = index as u32;
           }

           fn bh_node_index(&self) -> usize {
               self.node_index as usize
           }
       }
     #+end_src
     从这几行代码可以确认的是GpuPrimitive应该会被存储在一颗BHShape的树中，而node_index记录的也许是该节点在树中的位置，暂不清楚这个树结构如何被GPU使用。

     #+begin_src rust-ts
       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuInstance {
           pub min: Vec3,
           pub max: Vec3,
           pub transform: Mat4,
           pub inverse_transpose_model: Mat4,
           pub slice: GpuMeshSlice,
           pub material: GpuStandardMaterialOffset,
           node_index: u32,
       }

       impl Bounded for GpuInstance {
           fn aabb(&self) -> AABB {
               AABB {
                   min: self.min.to_array().into(),
                   max: self.max.to_array().into(),
               }
           }
       }

       impl BHShape for GpuInstance {
           fn set_bh_node_index(&mut self, index: usize) {
               self.node_index = index as u32;
           }

           fn bh_node_index(&self) -> usize {
               self.node_index as usize
           }
       }
     #+end_src
     这个结构看上去更加复杂，并不是非常直观，考虑到Instance的命名，难道它是指的包含了某种顶点数据的实例吗？

     如果是这么理解的话，那么min和max大概分别代表着该实例的aabb盒的最小值和最大值，

     transform也没有记录清楚是从哪个坐标系向哪个坐标系的转换，剩余的字段意义并不是非常明确。

     #+begin_src rust-ts
       #[derive(Debug, Default, Clone, ShaderType)]
       pub struct GpuNode {
           pub min: Vec3,
           pub max: Vec3,
           pub entry_index: u32,
           pub exit_index: u32,
           pub primitive_index: u32,
       }
     #+end_src
     这个Node应该就是BVH树上的一个节点，节点本身需要包含其包围盒的信息，同时又要记录其中的数据索引，以快速地进行查询。
      
     #+begin_src rust-ts
       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuStandardMaterial {
           pub base_color: Vec4,
           pub base_color_texture: u32,

           pub emissive: Vec4,
           pub emissive_texture: u32,

           pub perceptual_roughness: f32,
           pub metallic: f32,
           pub metallic_roughness_texture: u32,
           pub reflectance: f32,

           pub normal_map_texture: u32,
           pub occlusion_texture: u32,
       }
     #+end_src
     这个结构可能是转译了StandardMaterial中的数据，这些值可能需要进一步查询gltf的pbr实现才能知道其具体的含义。

     #+begin_src rust-ts
       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuStandardMaterialOffset {
           pub value: u32,
       }

       #[derive(Default, ShaderType)]
       pub struct GpuVertexBuffer {
           #[size(runtime)]
           pub data: Vec<GpuVertex>,
       }

       #[derive(Default, ShaderType)]
       pub struct GpuPrimitiveBuffer {
           #[size(runtime)]
           pub data: Vec<GpuPrimitive>,
       }

       #[derive(Default, ShaderType)]
       pub struct GpuNodeBuffer {
           pub count: u32,
           #[size(runtime)]
           pub data: Vec<GpuNode>,
       }

       #[derive(Default, ShaderType)]
       pub struct GpuInstanceBuffer {
           #[size(runtime)]
           pub data: Vec<GpuInstance>,
       }

       #[derive(Default, ShaderType)]
       pub struct GpuStandardMaterialBuffer {
           #[size(runtime)]
           pub data: Vec<GpuStandardMaterial>,
       }
     #+end_src
     这里定义的是一组传给GPU的数据。

     #[derive(ShaderType)]则是表示结构体可以在shader中使用。
     #[size(runtime)]表示可变长，运行时确定数据长度。

     #+begin_src rust-ts
       #[derive(Debug)]
       pub enum PrepareMeshError {
           MissingAttributePosition,
           MissingAttributeNormal,
           MissingAttributeUV,
           IncompatiblePrimitiveTopology,
       }
     #+end_src
     这里是枚举的错误类型，分别可能是position数据不存在，normal数据不存在，uv数据不存在，或者图元信息异常。

     #+begin_src rust-ts
       #[derive(Default, Clone)]
       pub struct GpuMesh {
           pub vertices: Vec<GpuVertex>,
           pub primitives: Vec<GpuPrimitive>,
           pub nodes: Vec<GpuNode>,
       }
     #+end_src
     GpuMesh数据的集合

     #+begin_src rust-ts
       impl GpuMesh {
           pub fn from_mesh(mesh: Mesh) -> Result<Self, PrepareMeshError> {
               let positions = mesh
                   .attribute(Mesh::ATTRIBUTE_POSITION)
                   .and_then(VertexAttributeValues::as_float3)
                   .ok_or(PrepareMeshError::MissingAttributePosition)?;
               let normals = mesh
                   .attribute(Mesh::ATTRIBUTE_NORMAL)
                   .and_then(VertexAttributeValues::as_float3)
                   .ok_or(PrepareMeshError::MissingAttributeNormal)?;
               let uvs = mesh
                   .attribute(Mesh::ATTRIBUTE_UV_0)
                   .and_then(|attribute| match attribute {
                       VertexAttributeValues::Float32x2(value) => Some(value),
                       _ => None,
                   })
                   .ok_or(PrepareMeshError::MissingAttributeUV)?;

               let mut vertices = vec![];
               for (position, normal, uv) in itertools::multizip((positions, normals, uvs)) {
                   vertices.push(GpuVertex {
                       position: Vec3::from_slice(position),
                       normal: Vec3::from_slice(normal),
                       uv: Vec2::from_slice(uv),
                   });
               }

               let indices: Vec<_> = match mesh.indices() {
                   Some(indices) => indices.iter().collect(),
                   None => vertices.iter().enumerate().map(|(id, _)| id).collect(),
               };

               let mut primitives = match mesh.primitive_topology() {
                   PrimitiveTopology::TriangleList => {
                       let mut primitives = vec![];
                       for chunk in &indices.iter().chunks(3) {
                           let (v0, v1, v2) = chunk
                               .cloned()
                               .next_tuple()
                               .ok_or(PrepareMeshError::IncompatiblePrimitiveTopology)?;
                           let vertices = [v0, v1, v2]
                               .map(|id| vertices[id])
                               .map(|vertex| vertex.position);
                           let indices = [v0, v1, v2].map(|id| id as u32);
                           primitives.push(GpuPrimitive {
                               vertices,
                               indices,
                               node_index: 0,
                           });
                       }
                       Ok(primitives)
                   }
                   PrimitiveTopology::TriangleStrip => {
                       let mut primitives = vec![];
                       for (id, (v0, v1, v2)) in indices.iter().cloned().tuple_windows().enumerate() {
                           let indices = if id & 1 == 0 {
                               [v0, v1, v2]
                           } else {
                               [v1, v0, v2]
                           };
                           let vertices = indices.map(|id| vertices[id]).map(|vertex| vertex.position);
                           let indices = indices.map(|id| id as u32);
                           primitives.push(GpuPrimitive {
                               vertices,
                               indices,
                               node_index: 0,
                           })
                       }
                       Ok(primitives)
                   }
                   _ => Err(PrepareMeshError::IncompatiblePrimitiveTopology),
               }?;

               let bvh = BVH::build(&mut primitives);
               let nodes = bvh.flatten_custom(&|aabb, entry_index, exit_index, primitive_index| GpuNode {
                   min: aabb.min.to_array().into(),
                   max: aabb.max.to_array().into(),
                   entry_index,
                   exit_index,
                   primitive_index,
               });

               Ok(Self {
                   vertices,
                   primitives,
                   nodes,
               })
           }
       }
     #+end_src
     注意，原生bevy_render中同样存在一个GpuMesh，不要混淆

     这个函数从Mesh资源中抽取了顶点、图元的数据，并将图元构造为AABB对齐的BVH树，树的每个节点都是GpuNode的结构，并将整个树扁平化放入nodes中。

     #+begin_src rust-ts
       /// Offsets (and length for nodes) of the mesh in the universal buffer.
       /// This is known only when [`MeshAssetState`] isn't [`Dirty`](MeshAssetState::Dirty).
       #[derive(Debug, Default, Clone, Copy, ShaderType)]
       pub struct GpuMeshSlice {
           pub vertex: u32,
           pub primitive: u32,
           pub node_offset: u32,
           pub node_len: u32,
       }
     #+end_src
     也许是指定某个Mesh在GpuMesh结构中的nodes的偏移大小，用来快速遍历。

     #+begin_src rust-ts
       #[derive(Debug, Hash, PartialEq, Eq, Clone, SystemSet)]
       pub enum MeshMaterialSystems {
           PrePrepareAssets,
           PrepareAssets,
           PrepareInstances,
           PostPrepareInstances,
       }
     #+end_src
     定义了一些system set，用来控制资源提取的顺序

     #+begin_src rust-ts
       #[derive(Resource, Debug)]
       pub struct MeshMaterialBindGroupLayout(pub BindGroupLayout);

       impl FromWorld for MeshMaterialBindGroupLayout {
           fn from_world(world: &mut World) -> Self {
               let render_device = world.resource::<RenderDevice>();
               let layout = render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
                   label: None,
                   entries: &[
                       // Vertices
                       BindGroupLayoutEntry {
                           binding: 0,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuVertexBuffer::min_size()),
                           },
                           count: None,
                       },
                       // Primitives
                       BindGroupLayoutEntry {
                           binding: 1,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuPrimitiveBuffer::min_size()),
                           },
                           count: None,
                       },
                       // Asset nodes
                       BindGroupLayoutEntry {
                           binding: 2,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuNodeBuffer::min_size()),
                           },
                           count: None,
                       },
                       // Instances
                       BindGroupLayoutEntry {
                           binding: 3,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuInstanceBuffer::min_size()),
                           },
                           count: None,
                       },
                       // Instance nodes
                       BindGroupLayoutEntry {
                           binding: 4,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuNodeBuffer::min_size()),
                           },
                           count: None,
                       },
                       // Materials
                       BindGroupLayoutEntry {
                           binding: 5,
                           visibility: ShaderStages::all(),
                           ty: BindingType::Buffer {
                               ty: BufferBindingType::Storage { read_only: true },
                               has_dynamic_offset: false,
                               min_binding_size: Some(GpuStandardMaterialBuffer::min_size()),
                           },
                           count: None,
                       },
                   ],
               });

               Self(layout)
           }
       }
     #+end_src
     这段代码定义了MeshMaterialBindGroupLayout在提取到render world后的值。

     它是一个bindgrouplayout，binding[0-5]分别是：GpuVertexBuffer/GpuPrimitiveBuffer/GpuNodeBuffer/GpuInstanceBuffer/GpuNodeBuffer/GpuStandardMaterialBuffer

     #+begin_src rust-ts
       #[derive(Resource, Debug)]
       pub struct TextureBindGroupLayout {
           pub layout: BindGroupLayout,
           pub count: usize,
       }

       fn prepare_texture_bind_group_layout(
           mut commands: Commands,
           render_device: Res<RenderDevice>,
           materials: Res<MaterialRenderAssets>,
       ) {
           let count = materials.textures.len();
           let layout = render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
               label: None,
               entries: &[
                   // Textures
                   BindGroupLayoutEntry {
                       binding: 0,
                       visibility: ShaderStages::all(),
                       ty: BindingType::Texture {
                           sample_type: TextureSampleType::Float { filterable: true },
                           view_dimension: TextureViewDimension::D2,
                           multisampled: false,
                       },
                       count: NonZeroU32::new(count as u32),
                   },
                   // Samplers
                   BindGroupLayoutEntry {
                       binding: 1,
                       visibility: ShaderStages::all(),
                       ty: BindingType::Sampler(SamplerBindingType::Filtering),
                       count: NonZeroU32::new(count as u32),
                   },
               ],
           });
           commands.insert_resource(TextureBindGroupLayout { layout, count });
       }
     #+end_src
     这段代码定义了Texture的数量和BindGroupLayout，每一个texture都有一个Texture和Sampler

     #+begin_src rust-ts
       #[derive(Resource)]
       pub struct MeshMaterialBindGroup {
           pub mesh_material: BindGroup,
           pub texture: BindGroup,
       }

       #[allow(clippy::too_many_arguments)]
       fn queue_mesh_material_bind_group(
           mut commands: Commands,
           render_device: Res<RenderDevice>,
           // 来自内部的mesh_pipeline，下文使用其中的dummy_white_gpu_image数据
           mesh_pipeline: Res<MeshPipeline>,
           // 来自mesh部分的RenderAssets，在mesh部分进行分析
           meshes: Res<MeshRenderAssets>,
           // 来自material部分的RenderAssets，在material部分进行分析
           materials: Res<MaterialRenderAssets>,
           // 来自instance部分的RenderAssets，在instance中进行分析
           instances: Res<InstanceRenderAssets>,
           // 为了取出实际的dummy_white_gpu_image，注意文中使用let重新赋予了images含义，不要混淆
           images: Res<RenderAssets<Image>>,
           // 两个在上文定义出的BindGroupLayout
           mesh_material_layout: Res<MeshMaterialBindGroupLayout>,
           texture_layout: Res<TextureBindGroupLayout>,
       ) {
           if let (
               Some(vertex_binding),
               Some(primitive_binding),
               Some(asset_node_binding),
               Some(instance_binding),
               Some(instance_node_binding),
               Some(material_binding),
           ) = (
               // 一些buffer的使用，这部分在具体的数据生成位置说明
               meshes.vertex_buffer.binding(),
               meshes.primitive_buffer.binding(),
               meshes.node_buffer.binding(),
               instances.instance_buffer.binding(),
               instances.node_buffer.binding(),
               materials.buffer.binding(),
           ) {
               let mesh_material = render_device.create_bind_group(&BindGroupDescriptor {
                   label: None,
                   layout: &mesh_material_layout.0,
                   entries: &[
                       BindGroupEntry {
                           binding: 0,
                           resource: vertex_binding,
                       },
                       BindGroupEntry {
                           binding: 1,
                           resource: primitive_binding,
                       },
                       BindGroupEntry {
                           binding: 2,
                           resource: asset_node_binding,
                       },
                       BindGroupEntry {
                           binding: 3,
                           resource: instance_binding,
                       },
                       BindGroupEntry {
                           binding: 4,
                           resource: instance_node_binding,
                       },
                       BindGroupEntry {
                           binding: 5,
                           resource: material_binding,
                       },
                   ],
               });

               // 将materials中的GpuImage取出来，GpuImage是Image的RenderAsset
               let images = materials.textures.iter().map(|handle| {
                   images
                       .get(handle)
                       .unwrap_or(&mesh_pipeline.dummy_white_gpu_image)
               });
               // 取出GpuImage中的texture
               let textures: Vec<_> = images.clone().map(|image| &*image.texture_view).collect();
               // 取出GpuImage中的sample
               let samplers: Vec<_> = images.map(|image| &*image.sampler).collect();

               let texture = render_device.create_bind_group(&BindGroupDescriptor {
                   label: None,
                   layout: &texture_layout.layout,
                   entries: &[
                       BindGroupEntry {
                           binding: 0,
                           resource: BindingResource::TextureViewArray(textures.as_slice()),
                       },
                       BindGroupEntry {
                           binding: 1,
                           resource: BindingResource::SamplerArray(samplers.as_slice()),
                       },
                   ],
               });

               // 插入MeshMaterialBindGroup，供后续使用
               commands.insert_resource(MeshMaterialBindGroup {
                   mesh_material,
                   texture,
               });
           } else {
               commands.remove_resource::<MeshMaterialBindGroup>();
           }
       }

     #+end_src
     本段代码非常重要，直接在代码中注释，见上文

     #+begin_src rust-ts

       pub struct SetMeshMaterialBindGroup<const I: usize>;
       impl<P: PhaseItem, const I: usize> RenderCommand<P> for SetMeshMaterialBindGroup<I> {
           type Param = SRes<MeshMaterialBindGroup>;
           type ViewWorldQuery = ();
           type ItemWorldQuery = ();

           fn render<'w>(
               _item: &P,
               _view: bevy::ecs::query::ROQueryItem<'w, Self::ViewWorldQuery>,
               _entity: bevy::ecs::query::ROQueryItem<'w, Self::ItemWorldQuery>,
               bind_group: SystemParamItem<'w, '_, Self::Param>,
               pass: &mut TrackedRenderPass<'w>,
           ) -> RenderCommandResult {
               pass.set_bind_group(I, &bind_group.into_inner().mesh_material, &[]);
               RenderCommandResult::Success
           }
       }
     #+end_src
     设置了一个新的RenderCommand
** shine
   检查AssetEvent::Added，发现仅有两个球体的场景中存在两个额外的网格体，通过uuid转换成u128数字，可查到这两个网格体来源于VolumetricFog，其定义如下
   #+begin_src rust-ts
     pub const PLANE_MESH: Handle<Mesh> = Handle::weak_from_u128(435245126479971076);

     pub const CUBE_MESH: Handle<Mesh> = Handle::weak_from_u128(5023959819001661507);
   #+end_src

   为了减少额外的网格判定，shine中需要找到禁用VolumetricFog插件的方法。

   或者仅添加指定网格体。

   #+begin_example
     2025-01-13T01:01:54.243733Z  INFO bevy_shine::mesh: mesh event: Added { id: AssetId<bevy_mesh::mesh::Mesh>{uuid: 00000000-0000-0000-060a-4d22f20f0304} }
     2025-01-13T01:01:54.243813Z  INFO bevy_shine::mesh: mesh event: Added { id: AssetId<bevy_mesh::mesh::Mesh>{uuid: 00000000-0000-0000-45b8-b0d6596e0843} }
     2025-01-13T01:01:54.243875Z  INFO bevy_shine::mesh: mesh event: Added { id: AssetId<bevy_mesh::mesh::Mesh>{ index: 0, generation: 0} }
     2025-01-13T01:01:54.244789Z  INFO bevy_shine::mesh: mesh event: Added { id: AssetId<bevy_mesh::mesh::Mesh>{ index: 1, generation: 0} }
   #+end_example
** waltz
   1. 使用leafwing-input-manager控制输入和action之间的映射，包括character的动作控制，camera的orbit和zoom，以及全局pause
   2. 使用bevy_atmosphere构建了一个skybox
   3. 使用bevy_dolly构建了相机的移动
