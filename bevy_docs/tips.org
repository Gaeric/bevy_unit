#+title: tips
#+startup: content
#+author: Gaeric
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/static/css/worg.css" rel="stylesheet" type="text/css">
#+OPTIONS: ^:{}
** debug调试
   开启trace级别日志

   RUST_BACKTRACE=full RUST_LOG=trace cargo run -r --example minimal
** note
*** insert resource from main world and use them for render world
    #+begin_src rust-ts
      // bevy v0.9

      let noise_path = self.noise_folder.clone();
      let load_system = move |mut commands: Commands, asset_server: Res<AssetServer>| {
          let handles = (0..NOISE_TEXTURE_COUNT)
              .map(|id| {
                  let name = format!("{}/LDR_RGBA_{}.png", noise_path, id);
                  asset_server.load(&name)
              })
              .collect();
          commands.insert_resource(NoiseTexture(handles));
      };

      fn extract_noise_texture(mut commands: Commands, noise_texture: Extract<Res<NoiseTexture>>) {
          commands.insert_resource(noise_texture.clone());
      }
    #+end_src

    #+begin_src rust-ts
      fn extract_noise_texture(mut commands: Commands, noise_texture: Extract<Res<NoiseTexture>>) {
          commands.insert_resource(noise_texture.clone());
      }

      // 可以参考GameOfLife中的写法，直接使用ExtractPlugins等效替代
      #[derive(Clone, Deref, DerefMut, ExtractResource)]
      pub struct NoiseTexture(pub Vec<Handle<Image>>);

      app.add_plugin(ExtractResourcePlugin::<NoiseTexture>::default());
    #+end_src
*** 使用parse库和宏来减少冗余代码
    见于parse文档： https://docs.rs/paste/latest/paste/

    示例：
    #+begin_src rust-ts
      macro_rules! create_modular_segment {
          ($name:ident) => {
              paste::paste! {
                  #[derive(Debug, Component)]
                  pub struct [<ModularCharacter $name>] {
                      pub id: usize,
                      pub instance_id: Option<InstanceId>,
                      pub entities: Vec<Entity>,
                  }
                  impl ModularCharacter for [<ModularCharacter $name>] {
                      fn id_mut(&mut self) -> &mut usize {
                          &mut self.id
                      }

                      fn instance_id_mut(&mut self) -> &mut Option<InstanceId> {
                          &mut self.instance_id
                      }

                      fn entities_mut(&mut self) -> &mut Vec<Entity> {
                          &mut self.entities
                      }

                      fn id(&self) -> &usize {
                          &self.id
                      }

                      fn instance_id(&self) -> Option<&InstanceId> {
                          self.instance_id.as_ref()
                      }

                      fn entities(&self) -> &Vec<Entity> {
                         &self.entities
                      }
                  }
              }
          };
      }
    #+end_src

    这段代码创建了一个create_modular_segment的宏，用这个宏来生成ModularCharacterXx的组件，由于每个组件的写法基本相同，这个方法可以减少大重的冗余代码。

    在这个宏中，使用paste宏拼接了[<>]中的字符串，然后为这个Component生成ModularCharacter需要的方法
*** 指定某个crate版本
    调试leafwing-input-manager时，发现leafwing-input-manager这个crate加入项目后，本地无法正常编译，但是在原始项目仓库中没有问题。

    经过简单验证，怀疑可能是因为指定项目使用了本地bevy crate，而leafwing-input-manager此时使用的仍然是crate.io中的依赖，导致了编译问题。

    由此，使用patch方法修改bevy版本

    #+begin_example
      [dependencies]
      bevy = "0.16.0"
      leafwing-input-manager = "0.17.0"

      [patch.crates-io]
      bevy = { path = "../bevy_engines/bevy_0.16/" }
    #+end_example

    修改后，发现需要编译的crate数量明显减少，且编译不再报错。

    在一个工作区中，只需要在工作区的根路径中指定crate的patch，工作区中所有子crate都会使用该patch版本进行编译，包括crate的依赖项

    修改完成后，可使用cargo tree检查依赖关系，或直接查看cargo.lock
