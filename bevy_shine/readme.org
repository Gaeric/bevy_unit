* bevy_shine
  ray tracing for bevy
** Intro
   这个crate基于bevy 0.15开始开发，目标是为bevy 0.16及以上版本支持路径追踪技术的全局光照。
* roadmap
** 原理
   Path Tracing从相机开始，向着屏幕上的每一个像素发出射线，这一条射线会击中场景中的物体，并发生弹射。

   1. 射线生成：射线生成有两个部分，一是从相机开始向像素投射的初始射线，二是与场景碰撞之后的次生射线
   2. 射线与物体相交判断
   3. 弹射所使用的BDXF函数
   4. 由于硬件限制，每个像素的射线数量可能不多，开发过程统一按硬件1spp来假设
   5. 对于1spp的路径追踪，会产生大量噪点，使用双边滤波降噪
   6. 采用Temporal类方法加权上一帧的结果
*** 疑问
    1. 路径追踪是图像逐像素顺序的，光栅化渲染过种是逐物体的，两者如何结合
    2. 路径追踪的相机、屏幕像素、物体位置和光栅化过程中使用的MVPE矩阵
    3. render_graph如何将这些过程组合起来
* 实现
  PREPASS -> LIGHT -> POST_PROCESS -> OVERLAY -> BLOOM -> TONEMAPPING -> UPSCALING

  以上述几个步骤拆分整个crate

  prepare/light/mesh/material/post_processing
** basic
   先学习并掌握如下bevy example
*** ssao plugin
    ScreenSpaceAmbientOcclusionPlugin

    基于bevy 0.12版本学习ssao plugin的插件内容，掌握关联技术，以促进bevy-hikari miza分支在bevy-0.12版本bug的修复

    增加定位信息： push_debug_group/pop_debug_group
    
*** headless_renderer
    确认ScheduleRunnerPlugin的作用以及hang住流程的原因

    ScheduleRunnerPlugin用于在没有winit event loop时提供一个运行时状态，可以是轮询或单次运行

    流程并没有真正hang住，可能是因为打印级别设置不正确的原因。
**** 如何更改render流程
**** src data来源于哪里
**** dest data何时接收
**** 数据发送和接收流程如何同步
*** gpu_readback
*** shader_prepass
*** custom_shader_instancing
*** custom_phase_item
*** custom_post_processing
*** compute_shader_game_of_life
*** fallback_image
*** fps_overlay
*** bloom_3d
** prepass
   1. ExtractComponent验证和应用
   2. DrawFunctions验证和应用
   3. SpecializedMeshPipelines验证和应用
   4. add_render_command的验证和应用
   5. RenderStage的验证和应用
** light
** post_process
** overlay
* Reference
** bevy_hikari
   https://github.com/cryscan/bevy-hikari

   本项目受bevy_hikari启发，做为学习光线追踪并为bevy高版本重新制作
** 《Ray Tracing in One Weekend 》
   https://raytracing.github.io/

   在开始本项目前，我学习了《Ray Tracing in One Weedkend》系列三本书藉，按照参考代码实现了书中的示例
** 《Ray Tracing Gems II》
   http://raytracinggems.com/

   学习过程中大量参考《Ray Tracing Gems II》
* Tips
  1. 实现基础原型时不与bevy代码过度藕合，保证独立和简单的基础功能以理解原型本身是最重要的事情。
